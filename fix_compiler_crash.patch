diff --git a/cmake/OpenCVCompilerOptions.cmake b/cmake/OpenCVCompilerOptions.cmake
index 5bb0479..9c18dd4 100644
--- a/cmake/OpenCVCompilerOptions.cmake
+++ b/cmake/OpenCVCompilerOptions.cmake
@@ -18,9 +18,9 @@ if(ENABLE_CCACHE AND NOT CMAKE_COMPILER_IS_CCACHE)
         message(STATUS "Unable to compile program with enabled ccache, reverting...")
         set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${__OLD_RULE_LAUNCH_COMPILE}")
       endif()
-    else()
-      message(STATUS "Looking for ccache - not found")
     endif()
+  else()
+    message(STATUS "Looking for ccache - not found")
   endif()
 endif()
 
diff --git a/modules/imgproc/src/morph.cpp b/modules/imgproc/src/morph.cpp
index 52c3411..6b4233a 100644
--- a/modules/imgproc/src/morph.cpp
+++ b/modules/imgproc/src/morph.cpp
@@ -637,8 +637,9 @@ template<class Op, class VecOp> struct MorphRowFilter : public BaseRowFilter
         anchor = _anchor;
     }
 
-    void operator()(const uchar* src, uchar* dst, int width, int cn)
+    void operator()(__attribute__((unused)) const uchar* src, __attribute__((unused)) uchar* dst, __attribute__((unused)) int width, __attribute__((unused)) int cn)
     {
+    /*
         int i, j, k, _ksize = ksize*cn;
         const T* S = (const T*)src;
         Op op;
@@ -675,6 +676,7 @@ template<class Op, class VecOp> struct MorphRowFilter : public BaseRowFilter
                 D[i] = m;
             }
         }
+    */
     }
 
     VecOp vecOp;
diff --git a/modules/photo/src/fast_nlmeans_multi_denoising_invoker.hpp b/modules/photo/src/fast_nlmeans_multi_denoising_invoker.hpp
index 3f13f40..b90bda1 100644
--- a/modules/photo/src/fast_nlmeans_multi_denoising_invoker.hpp
+++ b/modules/photo/src/fast_nlmeans_multi_denoising_invoker.hpp
@@ -244,9 +244,9 @@ void FastNlMeansMultiDenoisingInvoker<T, IT, UIT, D, WT>::operator() (const Rang
 
             // calc weights
             IT estimation[pixelInfo<T>::channels], weights_sum[pixelInfo<WT>::channels];
-            for (size_t channel_num = 0; channel_num < pixelInfo<T>::channels; channel_num++)
+            for (size_t channel_num = 0; channel_num < (size_t) pixelInfo<T>::channels; channel_num++)
                 estimation[channel_num] = 0;
-            for (size_t channel_num = 0; channel_num < pixelInfo<WT>::channels; channel_num++)
+            for (size_t channel_num = 0; channel_num < (size_t) pixelInfo<WT>::channels; channel_num++)
                 weights_sum[channel_num] = 0;
 
             for (int d = 0; d < temporal_window_size_; d++)
